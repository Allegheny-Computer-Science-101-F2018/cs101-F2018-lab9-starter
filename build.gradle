// available commands:
// "gradle check": run checkstyle to assess code quality
// "gradle clean": clean the project of all derived files
// "gradle build": create the bytecode from the source code
// "gradle run": run the program and produce output
// "gradle cleanTest": clean the JUnit test suite of derived files
// "gradle test": run the JUnit test suite and produce report

// comment out gatorgradle if you want to use dev version
plugins {
    id "org.gatored.gatorgradle" version "0.3.0"
    id "java"
}

// specify the use of JUnit for testing
dependencies {
  testCompile 'junit:junit:4.9'
}

// always produce diagnostic output when running the test suite
test {
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

// declare the repositories that are used to meet dependencies
repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

// specify the use of the gradle version
wrapper {
  gradleVersion = '4.9'
}

// declare values to place in the manifest file in the JAR
jar {
  manifest {
    attributes(
        'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
        'Main-Class': 'labnine.list.ArrayList'
        )
  }
}

// give the name of the application to run with "gradle run" command
apply plugin: 'application'
mainClassName = 'labnine.list.ArrayList'

// perform checkstyle checking with the "gradle check" command
apply plugin: 'checkstyle'
checkstyle.toolVersion = '8.1'
checkstyle {
  ignoreFailures = false
  maxWarnings = 0
  maxErrors = 0
  configFile = new File(rootDir, "config/checkstyle/google_checks.xml")
}
